datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Roles {
  USER
  TRAINER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

enum BodyCompositionGoal {
  LOSE
  GAIN
  MAINTAIN
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

model User {
  id                          String                @id @default(cuid())
  name                        String?
  email                       String                @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  role                        Roles                 @default(USER)
  subscriptionId              String?               @unique
  subscriptionCurrendCycleEnd DateTime?
  personalInfo                PersonalInfo?
  lastGeneratedWorkout        lastGeneratedWorkout?
  lastGeneratedMealPlan       lastGeneratedMealPlan?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model LoginCode {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PersonalInfo {
  id                  String              @id @default(cuid())
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String              @unique
  sex                 Sex
  dob                 DateTime
  bodyCompositionGoal BodyCompositionGoal
  activityLevel       ActivityLevel
  height              Float
  weights             Weight[]
  wokrouts            Workout[]
}

model Workout {
  id             String       @id @default(cuid())
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  personalInfoId String
  name           String
  exercises      Exercise[]
  createdAt      DateTime     @default(now())
}

enum intensityMetric {
  KG
  LBS
  SECONDS
  MINUTES
}

model Exercise {
  id        String           @id @default(cuid())
  workout   Workout          @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId String
  name      String
  sets      String
  reps      String
  intensity String?
  metric    intensityMetric?
  createdAt DateTime         @default(now())
}

model Weight {
  id             String       @id @default(cuid())
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  personalInfoId String
  weight         Float
  createdAt      DateTime     @default(now())
}

model Payment {
  razorpay_payment_id      String   @id
  razorpay_subscription_id String
  razorpay_signature       String
  createdAt                DateTime @default(now())
}

model lastGeneratedWorkout {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model Meals {
  id        String   @id @default(cuid())
  name      String
  FoodItems FoodItem[]
  calories  String
  protein   String
  carbs     String
  fats      String
  createdAt DateTime @default(now())
}
model FoodItem{
  id        String   @id @default(cuid())
  mealId    String
  meal      Meals    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  name      String
  calories  String
  protein   String
  carbs     String
  fats      String
  createdAt DateTime @default(now())
}

model lastGeneratedMealPlan {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}
